name: WikiDocumentation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

env:
  WIKI_URL: "http://wiki.franquinho.info/graphql"
  #WIKI_URL: "http://cyberwiki.internal.ctt.pt/graphql"
  #WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN_WIKILAB2  }}
  WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
  WIKI_LOCALE: "en"
  BASE_PATH: "Pedro/Aplica√ß√µes"
  REPO_NAME: ${{ vars.APP_NAME }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

jobs:
  check-altered-files:
    name: "Check Changed Files"
    runs-on: ubuntu-latest
    outputs:
      docs_changed: ${{ steps.check.outputs.docs_changed }}
      readme_changed: ${{ steps.check.outputs.readme_changed }}
      changelog_changed: ${{ steps.check.outputs.changelog_changed }}
      doc_files_changed: ${{ steps.check.outputs.doc_files_changed }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        run: |
            # If github.event.before is empty (e.g., first commit or manual run), fallback to comparing with the previous commit or list all files
            if [ -z "${{ github.event.before }}" ] || [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              # If this is the first commit or before is empty, list all tracked files (including added ones)
              git ls-files > changed_files.txt
            else
              git fetch origin ${{ github.event.before }}
              git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
            fi
            cat changed_files.txt
            changed_files=$(cat changed_files.txt | tr '\n' ' ')
            echo "Changed files: $changed_files"

      - name: Check if documentation files changed
        id: check
        run: |
          if grep -qE '^documentation/.*\.md$' changed_files.txt; then
            echo "Documentation files have changed."
            echo "docs_changed=true" >> "$GITHUB_OUTPUT"
            
            # Get the list of changed documentation files for debugging
            echo "Changed documentation files:"
            DOC_FILES_CHANGED=$(grep -E '^documentation/.*\.md$' changed_files.txt)
            echo "$DOC_FILES_CHANGED"
            DOC_FILES_CHANGED=($DOC_FILES_CHANGED)
            echo "DOC_FILES_CHANGED=${DOC_FILES_CHANGED[*]}" >> "$GITHUB_OUTPUT"
          else
            echo "No documentation files have changed."
            echo "docs_changed=false" >> "$GITHUB_OUTPUT"
          fi

          if grep -qE '^README\.md$' changed_files.txt; then
            echo "README.md has changed."
            echo "readme_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "README.md has not changed."
            echo "readme_changed=false" >> "$GITHUB_OUTPUT"
          fi

          if grep -qE '^CHANGELOG\.md$' changed_files.txt; then
            echo "CHANGELOG.md has changed."
            echo "changelog_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "CHANGELOG.md has not changed."
            echo "changelog_changed=false" >> "$GITHUB_OUTPUT"
          fi
  
  check-pages-folders:
    name: "Check if Pages and Folders are created"
    runs-on: ubuntu-latest
    outputs:
      has_repo_path: ${{ steps.check.outputs.has_repo_path }}
      has_documentation_folder: ${{ steps.check.outputs.has_documentation_folder }}
      has_readme_page: ${{ steps.check.outputs.has_readme_page }}
      has_changelog_page: ${{ steps.check.outputs.has_changelog_page }}
      repo_path: ${{ steps.check.outputs.repo_path }}
      missing_files: ${{ steps.check.outputs.missing_files }}
      docs_files: ${{ steps.check.outputs.docs_files }}
      missing_count: ${{ steps.check.outputs.missing_count }}
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Query Wiki.js and verify structure
        id: check
        run: |
          set -euo pipefail

          # Definir Paths
          BASE_PATH_SAFE=$(echo "$BASE_PATH" | iconv -f UTF-8 -t ASCII//TRANSLIT | sed 's/[^a-zA-Z0-9/_-]/_/g')
          BASE_PATH_SAFE=$(echo "$BASE_PATH_SAFE" | sed 's#//*#/#g')
          REPO_PATH="${BASE_PATH_SAFE}/${REPO_NAME}/"

          DOC_PREFIX="${REPO_PATH}documentation/"

          echo "üîç Verifica√ß√µes:"
          echo "  ‚Ä¢ REPO_PATH      = $REPO_PATH"
          echo "  ‚Ä¢ DOC_PREFIX     = $DOC_PREFIX"
          echo

          QUERY=$(cat <<'GRAPHQL'
          query ($locale: String!) {
            pages {
              list(locale: $locale) {
                id
                path
                title
              }
            }
          }
          GRAPHQL
          )

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" --arg loc "$WIKI_LOCALE" '{query: $q, variables: { locale: $loc }}')

          echo "Querying Wiki.js for all pages..."

          RESULT=$(curl -sS -X POST "$WIKI_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")
          
          echo "$RESULT" | jq .

          # Verrificar se Existem erros no resultado
          ERR_CNT=$(echo "$RESULT" | jq '.errors | length // 0')
          if [ "$ERR_CNT" -gt 0 ]; then
            echo "‚ùå Erros na consulta:"
            echo "$RESULT" | jq '.errors'
            exit 1
          fi

          # Flags para verificar se os paths existem
          HAS_REPO_PATH=$(echo "$RESULT" | jq --arg path "$REPO_PATH" '[.data.pages.list[] | select(.path | startswith($path))] | length > 0')
          HAS_DOCUMENTATION_FOLDER=$(echo "$RESULT" | jq --arg path "$DOC_PREFIX" '[.data.pages.list[] | select(.path | startswith($path))] | length > 0')
          HAS_README_PAGE=$(echo "$RESULT" | jq --arg path "${REPO_PATH}readme" '[.data.pages.list[] | select(.path == $path)] | length > 0')
          HAS_CHANGELOG_PAGE=$(echo "$RESULT" | jq --arg path "${REPO_PATH}changelog" '[.data.pages.list[] | select(.path == $path)] | length > 0')


          # List all .md files in documentation folder
          DOC_FILES=$(find documentation -type f -name "*.md" | sed 's#^documentation/##')
          DOC_FILES=($DOC_FILES)  # Convert to array

          # Remove the Extension from the filenames
          for i in "${!DOC_FILES[@]}"; do
            DOC_FILES[$i]=$(basename "${DOC_FILES[$i]}" .md)
          done

          # Verificar se esses arquivos existem na Wiki
          MISSING_FILES=()
          for FILE in "${DOC_FILES[@]}"; do
            FILE_PATH="${DOC_PREFIX}${FILE}"
            # echo "  ‚Ä¢ Checking if $FILE_PATH exists in Wiki..."
            EXISTS=$(echo "$RESULT" | jq --arg path "$FILE_PATH" '[.data.pages.list[] | select(.path == $path)] | length > 0')
            if [ "$EXISTS" != "true" ]; then
              MISSING_FILES+=("$FILE_PATH")
            fi
          done

          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "  ‚Ä¢ Missing documentation files in Wiki:"
            for FILE in "${MISSING_FILES[@]}"; do
              echo "    - $FILE"
            done
          fi
          echo "‚úÖ Verifica√ß√µes conclu√≠das."

          # Set outputs
          echo "has_repo_path=$HAS_REPO_PATH" >> $GITHUB_OUTPUT
          echo "has_documentation_folder=$HAS_DOCUMENTATION_FOLDER" >> $GITHUB_OUTPUT
          echo "has_readme_page=$HAS_README_PAGE" >> $GITHUB_OUTPUT
          echo "has_changelog_page=$HAS_CHANGELOG_PAGE" >> $GITHUB_OUTPUT
          echo "repo_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "missing_files=${MISSING_FILES[*]}" >> $GITHUB_OUTPUT
          echo "missing_count=${#MISSING_FILES[@]}" >> "$GITHUB_OUTPUT"
          echo "docs_files=${DOC_FILES[*]}" >> $GITHUB_OUTPUT

          # Echo dos outputs para debug
          echo "‚úÖ Outputs set:"
          echo "  ‚Ä¢ has_repo_path = $HAS_REPO_PATH"
          echo "  ‚Ä¢ has_documentation_folder = $HAS_DOCUMENTATION_FOLDER"
          echo "  ‚Ä¢ has_readme_page = $HAS_README_PAGE"
          echo "  ‚Ä¢ has_changelog_page = $HAS_CHANGELOG_PAGE"
          echo "  ‚Ä¢ missing_files = ${MISSING_FILES[*]}"
          echo "  ‚Ä¢ docs_files = ${DOC_FILES[*]}"

#Cria√ß√£o de P√°ginas
  create-missing-files:
    name: "Create Missing Documentation Files"
    runs-on: ubuntu-latest
    needs: [check-pages-folders]
    if: fromJSON(needs.check-pages-folders.outputs.missing_count) > 0
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create Documentation Missing Files
        run: |
          BASE_PATH_SAFE=$(echo "$BASE_PATH" | iconv -f UTF-8 -t ASCII//TRANSLIT | sed 's/[^a-zA-Z0-9/_-]/_/g')
          BASE_PATH_SAFE=$(echo "$BASE_PATH_SAFE" | sed 's#//*#/#g')
          REPO_PATH="${BASE_PATH_SAFE}/${REPO_NAME}/"

          DOC_PREFIX="${REPO_PATH}documentation/"

          # Read missing files from output
          missing_files=(${{ needs.check-pages-folders.outputs.missing_files }})
          echo "Missing files to create: ${missing_files[*]}"

          for FILE in "${missing_files[@]}"; do
            echo "  ‚Ä¢ Will create: $FILE"
            # Define source markdown file
            src_md="documentation/$(basename "$FILE").md"

            # Read Content from the source markdown file
            CONTENT=$(<"$src_md")

            # Rewrite links just in case (maybe not needed cause its already at the doc folder)
            CONTENT=$(
              printf '%s\n' "$CONTENT" | sed -E \
                -e 's#\]\([[:space:]]*/documentation/#](./documentation/#g' \
                -e 's#\]\([[:space:]]*documentation/#](./documentation/#g' \
                -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md([?#][^)]*)\)#](./documentation/\1\2)#g' \
                -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md\)#](./documentation/\1)#g'
            )
            
            CONTENT_JSON=$(jq -n --arg c "$CONTENT" '$c')

            # Build GraphQL query
            TITLE="$(basename "$FILE")"
            echo "    - Title: $TITLE"

            # Build GraphQL query in a variable (no expansion inside)
            QUERY='mutation ($content: String!, $locale: String!, $path: String!, $title: String!) { pages { create(path: $path, title: $title, content: $content, editor: "markdown", isPrivate: false, isPublished: true, locale: $locale, tags: [], description: "") { responseResult { succeeded slug message } page { id title path updatedAt } } } }'


            # Build payload: pass the query + variables; jq escapes values safely
            JSON_PAYLOAD=$(jq -n \
              --arg q "$QUERY" \
              --arg content "$CONTENT" \
              --arg loc "$WIKI_LOCALE" \
              --arg path "$FILE" \
              --arg title "$TITLE" \
              '{query: $q, variables: { content: $content, locale: $loc, path: $path, title: $title }}')

            RESULT=$(curl -s -X POST "$WIKI_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON_PAYLOAD")
            
            echo "$RESULT" | jq .

            SUCCEEDED=$(echo "$RESULT" | jq -r '.data.pages.create.responseResult.succeeded // empty')
            
            if [ "$SUCCEEDED" = "true" ]; then
              echo "‚úÖ Created: $FILE"
              PAGE_ID=$(echo "$RESULT" | jq -r .data.pages.create.page.id)
              echo "Page ID: $PAGE_ID"

              TITLE_SAFE="${TITLE^^}"
              TITLE_SAFE="${TITLE_SAFE//[^A-Z0-9_]/_}"
              VAR_NAME="WIKI_${TITLE_SAFE}_ID"

              echo "Saving $VAR_NAME=$PAGE_ID to repository variables‚Ä¶"

              #gh variable set "$VAR_NAME" --body "$PAGE_ID"
            else
              echo "‚ö†Ô∏è Failed to create: $FILE"
              echo "$RESULT" | jq .errors
              exit 1
            fi

          done
  
  create-readme-page:
    name: "Create README Page if missing"
    runs-on: ubuntu-latest
    needs: [check-pages-folders]
    if: needs.check-pages-folders.outputs.has_readme_page == 'false'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      - name: Create README Page in Wiki.js
        run: |
          set -euo pipefail

          # ------------------------------------------------------------
          # 1Ô∏è‚É£ Normalizar o BASE_PATH (remover acentos / caracteres ilegais)
          # ------------------------------------------------------------
          BASE_PATH_SAFE=$(echo "$BASE_PATH" | iconv -f UTF-8 -t ASCII//TRANSLIT | sed 's/[^a-zA-Z0-9/_-]/_/g')
          BASE_PATH_SAFE=$(echo "$BASE_PATH_SAFE" | sed 's#//*#/#g')

          # ------------------------------------------------------------
          # 2Ô∏è‚É£ Construir o caminho REPO_PATH de forma segura
          # ------------------------------------------------------------
          REPO_PATH="${BASE_PATH_SAFE}/${REPO_NAME}"
          REPO_PATH=$(echo "$REPO_PATH" | sed 's#//*#/#g')

          README_PATH="${REPO_PATH}/readme"

          echo "üìÇ BASE_PATH_SAFE: ${BASE_PATH_SAFE}"
          echo "üìÑ REPO_PATH: ${REPO_PATH}"
          echo "üìò README_PATH: ${README_PATH}"

          # ------------------------------------------------------------
          # 3Ô∏è‚É£ Ler o conte√∫do do README.md (sem CRLF)
          # ------------------------------------------------------------
          if [ ! -f README.md ]; then
            echo "‚ùå README.md n√£o encontrado no reposit√≥rio."
            exit 1
          fi
          CONTENT=$(tr -d '\r' < README.md)

          # ------------------------------------------------------------
          # 4Ô∏è‚É£ Reescrever links relativos (para documenta√ß√£o local)
          # ------------------------------------------------------------
          CONTENT=$(
            printf '%s\n' "$CONTENT" | sed -E \
              -e 's#\]\([[:space:]]*/documentation/#](./documentation/#g' \
              -e 's#\]\([[:space:]]*documentation/#](./documentation/#g' \
              -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md([?#][^)]*)\)#](./documentation/\1\2)#g' \
              -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md\)#](./documentation/\1)#g'
          )

          # ------------------------------------------------------------
          # 5Ô∏è‚É£ Construir query GraphQL
          # ------------------------------------------------------------
          QUERY='mutation ($content: String!, $locale: String!, $path: String!) {
            pages {
              create(
                path: $path,
                title: "README",
                content: $content,
                editor: "markdown",
                isPrivate: false,
                isPublished: true,
                locale: $locale,
                tags: [],
                description: ""
              ) {
                responseResult { succeeded slug message }
                page { id title path updatedAt }
              }
            }
          }'

          JSON_PAYLOAD=$(jq -n \
            --arg q "$QUERY" \
            --arg content "$CONTENT" \
            --arg loc "$WIKI_LOCALE" \
            --arg path "$README_PATH" \
            '{ query: $q, variables: { content: $content, locale: $loc, path: $path } }')

          # ------------------------------------------------------------
          # 6Ô∏è‚É£ Enviar para Wiki.js
          # ------------------------------------------------------------
          echo "üöÄ Enviando para Wiki.js..."
          RESULT=$(curl -s -X POST "$WIKI_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          echo "$RESULT" | jq .

          SUCCEEDED=$(echo "$RESULT" | jq -r '.data.pages.create.responseResult.succeeded // empty')
          if [ "$SUCCEEDED" = "true" ]; then
            PAGE_ID=$(echo "$RESULT" | jq -r .data.pages.create.page.id)
            echo "‚úÖ P√°gina criada com sucesso!"
            echo "üÜî Page ID: $PAGE_ID"
          else
            echo "‚ö†Ô∏è Falha ao criar p√°gina README"
            echo "$RESULT" | jq -r '.data.pages.create.responseResult.message'
            exit 1
          fi

  
  create-changelog-page:
    name: "Create CHANGELOG Page if missing"
    runs-on: ubuntu-latest
    needs: [check-pages-folders, create-readme-page]
    if: needs.check-pages-folders.outputs.has_changelog_page == 'false'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create CHANGELOG Page in Wiki.js
        run: |
          set -euo pipefail

          # ------------------------------------------------------------
          # 1Ô∏è‚É£ Normalizar BASE_PATH (remover acentos e caracteres ilegais)
          # ------------------------------------------------------------
          BASE_PATH_SAFE=$(echo "$BASE_PATH" | iconv -f UTF-8 -t ASCII//TRANSLIT | sed 's/[^a-zA-Z0-9/_-]/_/g')
          BASE_PATH_SAFE=$(echo "$BASE_PATH_SAFE" | sed 's#//*#/#g')

          # ------------------------------------------------------------
          # 2Ô∏è‚É£ Construir caminho REPO_PATH e CHANGELOG_PATH
          # ------------------------------------------------------------
          REPO_PATH="${BASE_PATH_SAFE}/${REPO_NAME}"
          REPO_PATH=$(echo "$REPO_PATH" | sed 's#//*#/#g')

          CHANGELOG_PATH="${REPO_PATH}/changelog"
          echo "üìÑ CHANGELOG_PATH: ${CHANGELOG_PATH}"

          # ------------------------------------------------------------
          # 3Ô∏è‚É£ Ler o conte√∫do do ficheiro CHANGELOG.md
          # ------------------------------------------------------------
          if [ ! -f CHANGELOG.md ]; then
            echo "‚ùå Ficheiro CHANGELOG.md n√£o encontrado no reposit√≥rio."
            exit 1
          fi

          CONTENT=$(tr -d '\r' < CHANGELOG.md)
          echo "‚úÖ Conte√∫do do CHANGELOG carregado."

          # ------------------------------------------------------------
          # 4Ô∏è‚É£ Construir query GraphQL
          # ------------------------------------------------------------
          QUERY='mutation ($content: String!, $locale: String!, $path: String!) {
            pages {
              create(
                path: $path,
                title: "CHANGELOG",
                content: $content,
                editor: "markdown",
                isPrivate: false,
                isPublished: true,
                locale: $locale,
                tags: [],
                description: "All notable changes to this project will be documented in this file."
              ) {
                responseResult { succeeded slug message }
                page { id title path updatedAt }
              }
            }
          }'

          JSON_PAYLOAD=$(jq -n \
            --arg q "$QUERY" \
            --arg content "$CONTENT" \
            --arg loc "$WIKI_LOCALE" \
            --arg path "$CHANGELOG_PATH" \
            '{ query: $q, variables: { content: $content, locale: $loc, path: $path } }')

          # ------------------------------------------------------------
          # 5Ô∏è‚É£ Enviar para Wiki.js
          # ------------------------------------------------------------
          echo "üöÄ Criando p√°gina CHANGELOG..."
          RESULT=$(curl -s -X POST "$WIKI_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          echo "$RESULT" | jq .

          SUCCEEDED=$(echo "$RESULT" | jq -r '.data.pages.create.responseResult.succeeded // empty')
          if [ "$SUCCEEDED" = "true" ]; then
            PAGE_ID=$(echo "$RESULT" | jq -r .data.pages.create.page.id)
            echo "‚úÖ P√°gina CHANGELOG criada com sucesso!"
            echo "üÜî Page ID: $PAGE_ID"
          else
            echo "‚ö†Ô∏è Falha ao criar p√°gina CHANGELOG"
            echo "$RESULT" | jq -r '.data.pages.create.responseResult.message'
            exit 1
          fi


# Updates de P√°ginas
  update-docs-content:
    name: "Update Documentation Files in Wiki"
    runs-on: ubuntu-latest
    needs: [check-pages-folders, check-altered-files]
    if: always()
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Get Page IDs from Repo Variables
        env:
          #GH_TOKEN: ${{ secrets.REPO_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          echo "Fetching repository variables..."
          VARS_JSON=$(gh api repos/${GITHUB_REPOSITORY}/actions/variables)
          echo "Repository variables fetched."

          # Send Variables to the env
          echo "Setting environment variables for WIKI_*_ID:"
          for VAR in $(echo "$VARS_JSON" | jq -r '.variables[].name' | grep '^WIKI_.*_ID$'); do
            VALUE=$(echo "$VARS_JSON" | jq -r --arg NAME "$VAR" '.variables[] | select(.name == $NAME) | .value')
            echo "  - $VAR: $VALUE"
            echo "$VAR=$VALUE" >> $GITHUB_ENV
          done

      - name: Update the Files in Wiki
        run: |
          DOC_ROOT="${BASE_PATH}/${REPO_NAME}/documentation/"

          # List all documentation files from the output
          docs_files=(${{ needs.check-pages-folders.outputs.docs_files }})
          echo "All documentation files from repository: ${docs_files[*]}"

          # Remove Missing files from the list (they will be created in other step)
          missing_files=(${{ needs.check-pages-folders.outputs.missing_files }})
          echo "Removing missing files from update list..."
          for MISSING in "${missing_files[@]}"; do
            MISSING_BASENAME="$(basename "$MISSING")"
            for i in "${!docs_files[@]}"; do
              if [ "${docs_files[$i]}" = "$MISSING_BASENAME" ]; then
                unset 'docs_files[i]'
              fi
            done
          done
          
          echo "Documentation files after removing missing ones: ${docs_files[*]}"

          # Remove the unchanged files from the list (if any)
          changed_files=(${{ needs.check-altered-files.outputs.doc_files_changed }})
          # Remove extension and keep only the basename for each changed file
          for i in "${!changed_files[@]}"; do
            changed_files[$i]=$(basename "${changed_files[$i]}" .md)
          done
          echo "Keeping only changed files for update: ${changed_files[*]}"
          for i in "${!docs_files[@]}"; do
            if [[ ! " ${changed_files[*]} " =~ " ${docs_files[$i]} " ]]; then
              unset 'docs_files[i]'
            fi
          done

          echo "Final list of documentation files to update: ${docs_files[*]}"

          if [ ${#docs_files[@]} -eq 0 ]; then
            echo "No documentation files to update after filtering. Exiting."
            exit 0
          fi

          for FILE in "${docs_files[@]}"; do
            echo "  ‚Ä¢ Will update: $FILE"
            # Define source markdown file
            src_md="documentation/$(basename "$FILE").md"

            # Read Content from the source markdown file
            CONTENT=$(<"$src_md")

            # Rewrite links just in case (maybe not needed cause its already at the doc folder)
            CONTENT=$(
              printf '%s\n' "$CONTENT" | sed -E \
                -e 's#\]\([[:space:]]*/documentation/#](./documentation/#g' \
                -e 's#\]\([[:space:]]*documentation/#](./documentation/#g' \
                -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md([?#][^)]*)\)#](./documentation/\1\2)#g' \
                -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md\)#](./documentation/\1)#g'
            )

            CONTENT_JSON=$(jq -n --arg c "$CONTENT" '$c')

            # Build GraphQL query
            TITLE="$(basename "$FILE")"
            echo "    - Title: $TITLE"

            TITLE_SAFE="${TITLE^^}"
            TITLE_SAFE="${TITLE_SAFE//[^A-Z0-9_]/_}"
            VAR_NAME="WIKI_${TITLE_SAFE}_ID"
            PAGE_ID="${!VAR_NAME}"
            echo "    - Page ID: $PAGE_ID"

            if [ -z "$PAGE_ID" ]; then
              echo "‚ö†Ô∏è Page ID for $TITLE not found in repository variables ($VAR_NAME). Skipping."
              continue
            fi

            # Build GraphQL query in a variable (no expansion inside)
            QUERY='mutation ($id: Int!, $content: String!, $locale: String!) { pages { update(id: $id, content: $content, editor: "markdown", isPrivate: false, isPublished: true, locale: $locale, tags: []) { responseResult { succeeded slug message } page { id title path updatedAt } } } }'

            # Build payload: pass the query + variables; jq escapes values safely
            JSON_PAYLOAD=$(jq -n \
              --arg q "$QUERY" \
              --argjson id $PAGE_ID \
              --arg content "$CONTENT" \
              --arg loc "$WIKI_LOCALE" \
              '{query: $q, variables: { id: $id, content: $content, locale: $loc }}')
            
            RESULT=$(curl -s -X POST "$WIKI_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON_PAYLOAD")
            
            SUCCEEDED=$(echo "$RESULT" | jq -r '.data.pages.update.responseResult.succeeded // empty')
            if [ "$SUCCEEDED" = "true" ]; then
              echo "‚úÖ Updated: $FILE"
            else
              echo "‚ö†Ô∏è Failed to update: $FILE"
              echo "$RESULT" | jq .errors
              exit 1
            fi
          done

  update-readme-content:
    name: "Update ReadMe in Wiki"
    runs-on: ubuntu-latest
    needs: [check-pages-folders, check-altered-files]
    if: needs.check-pages-folders.outputs.has_readme_page == 'true' && needs.check-altered-files.outputs.readme_changed == 'true'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Update README.md content (read and rewrite links)
        env:
          WIKI_README_ID: ${{ vars.WIKI_README_ID }}
        run: |
          set -euo pipefail
          if [ -z "$WIKI_README_ID" ]; then
            echo "‚ö†Ô∏è WIKI_README_ID is not set. Exiting."
            exit 1
          fi

          # Ler e normalizar CRLF
          CONTENT=$(tr -d '\r' < README.md)

          # Reescrever links
          CONTENT=$(
            printf '%s\n' "$CONTENT" | sed -E \
              -e 's#\]\([[:space:]]*/documentation/#](./documentation/#g' \
              -e 's#\]\([[:space:]]*documentation/#](./documentation/#g' \
              -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md([?#][^)]*)\)#](./documentation/\1\2)#g' \
              -e 's#\]\([[:space:]]*\./documentation/([^)]*)\.md\)#](./documentation/\1)#g'
          )
          
          CONTENT_JSON=$(jq -n --arg c "$CONTENT" '$c')
          echo "‚úÖ Prepared README content."

          QUERY='mutation ($id: Int!, $content: String!, $locale: String!) { pages { update(id: $id, content: $content, editor: "markdown", isPrivate: false, isPublished: true, locale: $locale, tags: []) { responseResult { succeeded slug message } page { id title path updatedAt } } } }'

          JSON_PAYLOAD=$(jq -n \
            --arg q "$QUERY" \
            --arg id "$WIKI_README_ID" \
            --arg content "$CONTENT" \
            --arg loc "$WIKI_LOCALE" \
            '{query: $q, variables: { id: ($id | tonumber), content: $content, locale: $loc }}'
          )

          RESULT=$(curl -s -X POST "$WIKI_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD" | jq)

          echo "$RESULT"

          SUCCEEDED=$(echo "$RESULT" | jq -r '.data.pages.update.responseResult.succeeded // empty')

          if [ "$SUCCEEDED" = "true" ]; then
            echo "‚úÖ Upload complete."
          else
            echo "‚ö†Ô∏è Upload Failed."
            echo "$RESULT" | jq .errors
            exit 1
          fi

  update-changelog-content:
    name: "Update Changelog in Wiki"
    runs-on: ubuntu-latest
    needs: [check-pages-folders, check-altered-files, update-readme-content]
    if: needs.check-pages-folders.outputs.has_changelog_page == 'true' && needs.check-altered-files.outputs.changelog_changed == 'true'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Upload Changelog
        env:
          WIKI_CHANGELOG_ID: ${{ vars.WIKI_CHANGELOG_ID }}
        run: |
          BASE_PATH_SAFE=$(echo "$BASE_PATH" | iconv -f UTF-8 -t ASCII//TRANSLIT | sed 's/[^a-zA-Z0-9/_-]/_/g')
          BASE_PATH_SAFE=$(echo "$BASE_PATH_SAFE" | sed 's#//*#/#g')
          REPO_PATH="${BASE_PATH_SAFE}/${REPO_NAME}"
          CHANGELOG_PATH="${REPO_PATH}/changelog"
          echo "Updating CHANGELOG page at path: ${CHANGELOG_PATH}"

          if [ -z "$WIKI_CHANGELOG_ID" ]; then
            echo "‚ö†Ô∏è WIKI_CHANGELOG_ID is not set. Exiting."
            exit 1
          fi

          CONTENT=$(tr -d '\r' < CHANGELOG.md)
          CONTENT_JSON=$(jq -n --arg c "$CONTENT" '$c')

          # Build GraphQL query in a variable (no expansion inside)
          QUERY='mutation ($id: Int!, $content: String!, $locale: String!) { pages { update(id: $id, title: "CHANGELOG", content: $content, editor: "markdown", isPrivate: false, isPublished: true, locale: $locale, tags: []) { responseResult { succeeded slug message } page { id title path updatedAt } } } }'

          # Build payload: pass the query + variables; jq escapes values safely
          JSON_PAYLOAD=$(jq -n \
            --arg q "$QUERY" \
            --argjson id "$WIKI_CHANGELOG_ID" \
            --arg content "$CONTENT" \
            --arg loc "$WIKI_LOCALE" \
            '{query: $q, variables: { id: ($id | tonumber), content: $content, locale: $loc }}')

          RESULT=$(curl -s -X POST "$WIKI_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")
          
          echo "$RESULT" | jq .

          SUCCEEDED=$(echo "$RESULT" | jq -r '.data.pages.update.responseResult.succeeded // empty')

          if [ "$SUCCEEDED" = "true" ]; then
            echo "‚úÖ Updated: $CHANGELOG_PATH"
          else
            echo "‚ö†Ô∏è Failed to update: $CHANGELOG_PATH"
            echo "$RESULT" | jq .errors
            exit 1
          fi

# Upload de M√≠dia
  upload-docs-media:
    name: "Upload Documentation Media"
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: "List Media Files in documentation/ (non-md files)"
        run: |
          MEDIA_FILES=$(find documentation/ -type f ! -name "*.md")
          MEDIA_FILES=($MEDIA_FILES)  # Convert to array
          echo "Media files found for upload: ${MEDIA_FILES[*]}"
          echo "MEDIA_FILES=${MEDIA_FILES[*]}" >> "$GITHUB_ENV"

      - name: Create Target Folder in Wiki.js
        run: |
          set -euo pipefail
          echo "üîß Preparing Wiki folder structure for media upload..."

          # ------------------------------------------------------------
          # 1Ô∏è‚É£ Normalizar BASE_PATH (remover acentos, caracteres ilegais e barras duplicadas)
          # ------------------------------------------------------------
          BASE_PATH_SAFE=$(echo "$BASE_PATH" | iconv -f UTF-8 -t ASCII//TRANSLIT | sed 's/[^a-zA-Z0-9/_-]/_/g')
          BASE_PATH_SAFE=$(echo "$BASE_PATH_SAFE" | sed 's#//*#/#g')

          REPO_PATH="${BASE_PATH_SAFE}/${REPO_NAME}"
          REPO_PATH=$(echo "$REPO_PATH" | sed 's#//*#/#g')

          echo "üìÇ Normalized path: ${REPO_PATH}"

          # ------------------------------------------------------------
          # 2Ô∏è‚É£ Listar pastas existentes no Wiki.js
          # ------------------------------------------------------------
          FOLDER_QUERY='query { assets { folders(parentFolderId: 1) { id name slug } } }'
          JSON_PAYLOAD=$(jq -n --arg q "$FOLDER_QUERY" '{ query: $q }')

          RESULT=$(curl -sS -X POST "$WIKI_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          echo "üìã Existing folders under parent 1:"
          echo "$RESULT" | jq '.data.assets.folders[] | {id, name, slug}'

          # ------------------------------------------------------------
          # 3Ô∏è‚É£ Verificar (ou criar) a pasta principal do reposit√≥rio
          # ------------------------------------------------------------
          repo_name="${REPO_NAME,,}"
          repo_slug=$(echo "$repo_name" | sed 's/[^a-z0-9_-]/_/g')

          echo "üîé Checking for folder: $repo_slug"

          FOLDER_ID=$(echo "$RESULT" | jq -r --arg SLUG "$repo_slug" '.data.assets.folders[] | select(.slug == $SLUG or .name == $SLUG) | .id')

          if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
            echo "üìÅ Folder not found. Creating folder '${repo_slug}'..."
            
            MUTATION=$(cat <<GRAPHQL
            mutation {
              assets {
                createFolder(parentFolderId: 1, slug: "${repo_slug}", name: "${repo_name}") {
                  responseResult { succeeded message }
                  folder { id name slug }
                }
              }
            }
          GRAPHQL
          )
            JSON_PAYLOAD=$(jq -n --arg q "$MUTATION" '{ query: $q }')

            RESULT=$(curl -sS -X POST "$WIKI_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON_PAYLOAD")

            echo "$RESULT" | jq .

            FOLDER_ID=$(echo "$RESULT" | jq -r '.data.assets.createFolder.folder.id')
            if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
              echo "‚ùå Failed to create target folder '${repo_slug}'."
              echo "$RESULT" | jq .
              exit 1
            fi
            echo "‚úÖ Created new folder '${repo_slug}' with ID: ${FOLDER_ID}"
          else
            echo "‚úÖ Folder '${repo_slug}' already exists with ID: ${FOLDER_ID}"
          fi

          echo "FOLDER_ID=${FOLDER_ID}" >> "$GITHUB_ENV"

      - name: Start Python Upload Script
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Upload Media Files to Wiki.js
        working-directory: .github/scripts
        run: |
          python upload_media.py
