name: Upload Media to Wiki.js

on:
  workflow_dispatch:

env:
  WIKI_URL: http://wiki.franquinho.info
  PARENT_FOLDER_ID: 1

jobs:
  upload-docs-media:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Media Files
        id: detect
        run: |
          # build newline-separated list containing README.md, CHANGELOG.md (if exist) and all files under documentation/
          MEDIA_FILES=""
          [ -f README.md ] && MEDIA_FILES="$(printf "%s\n" "README.md")"
          [ -f CHANGELOG.md ] && MEDIA_FILES="$(printf "%s\n%s" "$MEDIA_FILES" "CHANGELOG.md")"
          if [ -d documentation ]; then
            while IFS= read -r -d '' f; do
              MEDIA_FILES="$(printf "%s\n%s" "$MEDIA_FILES" "$f")"
            done < <(find documentation/ -type f -print0)
          fi
          # remove empty lines and duplicates
          MEDIA_FILES="$(echo "$MEDIA_FILES" | sed '/^$/d' | awk '!seen[$0]++')"
          echo "MEDIA_FILES<<EOF" >> $GITHUB_ENV
          echo "$MEDIA_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Ficheiros encontrados:"
          echo "$MEDIA_FILES"

      - name: Get Repository Name
        id: repo
        run: |
          repo_name="${GITHUB_REPOSITORY##*/}"   # extrai apenas o nome do repo
          echo "REPO_NAME=${repo_name,,}" >> $GITHUB_ENV
          echo "Repository name: ${repo_name,,}"

      - name: Create folder in Wiki.js (if needed)
        id: folder
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          # compute API endpoints from WIKI_URL
          GRAPHQL_URL="${WIKI_URL%/}/graphql"
          UPLOAD_URL="${WIKI_URL%/}/u"

          QUERY_TEMPLATE='query { assets { folders(parentFolderId: $PARENT_FOLDER_ID) { id name } } }'
          QUERY=$(echo "$QUERY_TEMPLATE" | sed "s/\$PARENT_FOLDER_ID/$PARENT_FOLDER_ID/g")
          JSON=$(jq -n --arg q "$QUERY" '{ query: $q }')

          RESULT=$(curl -s -X POST "$GRAPHQL_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON")

          # validate JSON before piping to jq
          if ! echo "$RESULT" | jq . >/dev/null 2>&1; then
            echo "ERROR: Non-JSON response when querying folders:"
            echo "$RESULT"
            exit 1
          fi

          # try to find existing repo folder
          FOLDER_ID=$(echo "$RESULT" | jq -r --arg NAME "$REPO_NAME" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)

          if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
            echo "Folder not found, creating..."

            # always include parentFolderId, even if null
            MUTATION_TEMPLATE='mutation { assets { createFolder(parentFolderId: PARENT_FOLDER_ID, slug: "$REPO_NAME", name: "$REPO_NAME") { responseResult { message succeeded } } } }'
            MUTATION=$(echo "$MUTATION_TEMPLATE" | sed "s/PARENT_FOLDER_ID/${PARENT_FOLDER_ID:-null}/g" | sed "s/\$REPO_NAME/$REPO_NAME/g")
            JSON_MUT=$(jq -n --arg q "$MUTATION" '{ query: $q }')

            RESULT_MUT=$(curl -s -X POST "$GRAPHQL_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON_MUT")

            if ! echo "$RESULT_MUT" | jq . >/dev/null 2>&1; then
              echo "ERROR: Non-JSON response when creating folder:"
              echo "$RESULT_MUT"
              exit 1
            fi

            # check succeeded flag or errors
            SUCCEEDED=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.succeeded // empty' 2>/dev/null || true)
            MESSAGE=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.message // empty' 2>/dev/null || true)
            HAS_ERRORS=$(echo "$RESULT_MUT" | jq -e '.errors? != null' >/dev/null 2>&1; echo $?)

            if [ "$HAS_ERRORS" -eq 0 ] || [ "$SUCCEEDED" = "false" ]; then
              echo "Creation reported failure or GraphQL errors: $MESSAGE"
              echo "Full response:"
              echo "$RESULT_MUT"
              exit 1
            fi

            # after mutation, re-query children of provided parent to find the created folder and get its id
            QUERY_AFTER=$(echo "$QUERY_TEMPLATE" | sed "s/\$PARENT_FOLDER_ID/$PARENT_FOLDER_ID/g")
            JSON_AFTER=$(jq -n --arg q "$QUERY_AFTER" '{ query: $q }')
            RESULT_AFTER=$(curl -s -X POST "$GRAPHQL_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON_AFTER")

            if ! echo "$RESULT_AFTER" | jq . >/dev/null 2>&1; then
              echo "WARNING: Non-JSON response when re-listing folders for parent $PARENT_FOLDER_ID:"
              echo "$RESULT_AFTER"
            fi

            FOLDER_ID=$(echo "$RESULT_AFTER" | jq -r --arg NAME "$REPO_NAME" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)

            if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
              echo "ERROR: Could not obtain a valid folder ID after creation. Creation response:"
              echo "$RESULT_MUT"
              exit 1
            fi

            echo "Folder created with ID $FOLDER_ID"
          else
            echo "Folder already exists with ID $FOLDER_ID"
          fi

          echo "FOLDER_ID=$FOLDER_ID" >> $GITHUB_ENV


      - name: Upload Media Files
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          # compute endpoints
          GRAPHQL_URL="${WIKI_URL%/}/graphql"
          UPLOAD_URL="${WIKI_URL%/}/u"

          if [ -z "$MEDIA_FILES" ]; then
            echo "No media files to upload."
            exit 0
          fi

          # helper: ensure a nested path exists under a given parent folder id; returns final folder id
          ensure_folder_path() {
            local parent_id="$1"
            local path="$2"

            # fallback if parent_id is empty/null: use null for root
            if [ -z "$parent_id" ] || [ "$parent_id" = "null" ]; then
              parent_id="null"
            fi

            IFS='/' read -ra parts <<< "$path"
            for seg in "${parts[@]}"; do
              [ -z "$seg" ] && continue
              # query children folders of current parent
              QUERY_TEMPLATE='query { assets { folders(parentFolderId: PARENT_ID) { id name } } }'
              QUERY=$(echo "$QUERY_TEMPLATE" | sed "s|PARENT_ID|$parent_id|g")
              JSON=$(jq -n --arg q "$QUERY" '{ query: $q }')

              RESULT=$(curl -s -X POST "$GRAPHQL_URL" \
                -H "Authorization: Bearer $WIKI_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data "$JSON")

              if ! echo "$RESULT" | jq . >/dev/null 2>&1; then
                echo "ERROR: Non-JSON response when listing folders (parent $parent_id):"
                echo "$RESULT"
                exit 1
              fi

              FOLDER_ID=$(echo "$RESULT" | jq -r --arg NAME "$seg" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)

              if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
                # always include parentFolderId, even if null
                MUTATION_TEMPLATE='mutation { assets { createFolder(parentFolderId: PARENT_ID, slug: "SLUG", name: "NAME") { responseResult { message succeeded } } } }'
                MUTATION=$(echo "$MUTATION_TEMPLATE" | sed "s|PARENT_ID|$parent_id|g" | sed "s|SLUG|$seg|g" | sed "s|NAME|$seg|g")
                JSON_MUT=$(jq -n --arg q "$MUTATION" '{ query: $q }')

                RESULT_MUT=$(curl -s -X POST "$GRAPHQL_URL" \
                  -H "Authorization: Bearer $WIKI_API_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "$JSON_MUT")

                if ! echo "$RESULT_MUT" | jq . >/dev/null 2>&1; then
                  echo "ERROR: Non-JSON response when creating folder '$seg' under parent $parent_id:"
                  echo "$RESULT_MUT"
                  exit 1
                fi

                SUCCEEDED=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.succeeded // empty' 2>/dev/null || true)
                MSG=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.message // empty' 2>/dev/null || true)
                if [ "$SUCCEEDED" = "false" ]; then
                  echo "Creation of '$seg' under parent $parent_id failed: $MSG"
                  echo "Full response:"
                  echo "$RESULT_MUT"
                  exit 1
                fi

                # re-list children to find the newly created folder id
                QUERY2=$(echo "$QUERY_TEMPLATE" | sed "s|PARENT_ID|$parent_id|g")
                JSON2=$(jq -n --arg q "$QUERY2" '{ query: $q }')
                RESULT2=$(curl -s -X POST "$GRAPHQL_URL" \
                  -H "Authorization: Bearer $WIKI_API_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "$JSON2")

                if ! echo "$RESULT2" | jq . >/dev/null 2>&1; then
                  echo "WARNING: Non-JSON response when re-listing children of $parent_id:"
                  echo "$RESULT2"
                fi

                FOLDER_ID=$(echo "$RESULT2" | jq -r --arg NAME "$seg" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)

                if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
                  echo "ERROR: Could not create/find folder '$seg' under parent $parent_id. Creation response:"
                  echo "$RESULT_MUT"
                  exit 1
                fi

                echo "Created folder '$seg' (id: $FOLDER_ID) under parent $parent_id"
              else
                echo "Found folder '$seg' (id: $FOLDER_ID) under parent $parent_id"
              fi

              parent_id="$FOLDER_ID"
            done
            echo "$parent_id"
          }

          # iterate over newline-separated media file list
          echo "$MEDIA_FILES" | while IFS= read -r filepath || [ -n "$filepath" ]; do
            [ -z "$filepath" ] && continue
            echo "Processing $filepath"

            # determine relative directory within the repo (strip leading ./ if any)
            relpath="${filepath#./}"
            dirpath="$(dirname "$relpath")"

            # target parent folder starts at repo folder (FOLDER_ID exported earlier)
            target_parent="$FOLDER_ID"

            # if file is under a subpath (e.g. documentation/...), create/resolve subfolders
            if [ "$dirpath" != "." ] && [ "$dirpath" != "$relpath" ]; then
              # ensure nested folders under repo folder
              target_parent="$(ensure_folder_path "$FOLDER_ID" "$dirpath")"
            fi

            echo "Uploading $filepath to folder id $target_parent"

            RESPONSE_WITH_STATUS=$(curl -s -w "\n%{http_code}" -X POST "$UPLOAD_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -F "mediaUpload={\"folderId\":$target_parent}" \
              -F "mediaUpload=@$filepath")
            HTTP_STATUS=$(echo "$RESPONSE_WITH_STATUS" | tail -n1)
            BODY=$(echo "$RESPONSE_WITH_STATUS" | sed '$d')

            if [[ "$HTTP_STATUS" =~ ^2 ]]; then
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "Upload succeeded (HTTP $HTTP_STATUS) for file: $filepath"
                echo "$BODY"
              fi
            else
              echo "Upload failed (HTTP $HTTP_STATUS) for file: $filepath"
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "$BODY"
              fi
              exit 1
            fi
          done
              else
                echo "Upload succeeded (HTTP $HTTP_STATUS) for file: $filepath"
                echo "$BODY"
              fi
            else
              echo "Upload failed (HTTP $HTTP_STATUS) for file: $filepath"
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "$BODY"
              fi
              exit 1
            fi
          done
                fi

                echo "Created folder '$seg' (id: $FOLDER_ID) under parent $parent_id"
              else
                echo "Found folder '$seg' (id: $FOLDER_ID) under parent $parent_id"
              fi

              parent_id="$FOLDER_ID"
            done
            echo "$parent_id"
          }

          # iterate over newline-separated media file list
          echo "$MEDIA_FILES" | while IFS= read -r filepath || [ -n "$filepath" ]; do
            [ -z "$filepath" ] && continue
            echo "Processing $filepath"

            # determine relative directory within the repo (strip leading ./ if any)
            relpath="${filepath#./}"
            dirpath="$(dirname "$relpath")"

            # target parent folder starts at repo folder (FOLDER_ID exported earlier)
            target_parent="$FOLDER_ID"

            # if file is under a subpath (e.g. documentation/...), create/resolve subfolders
            if [ "$dirpath" != "." ] && [ "$dirpath" != "$relpath" ]; then
              # ensure nested folders under repo folder
              target_parent="$(ensure_folder_path "$FOLDER_ID" "$dirpath")"
            fi

            echo "Uploading $filepath to folder id $target_parent"

            RESPONSE_WITH_STATUS=$(curl -s -w "\n%{http_code}" -X POST "$UPLOAD_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -F "mediaUpload={\"folderId\":$target_parent}" \
              -F "mediaUpload=@$filepath")
            HTTP_STATUS=$(echo "$RESPONSE_WITH_STATUS" | tail -n1)
            BODY=$(echo "$RESPONSE_WITH_STATUS" | sed '$d')

            if [[ "$HTTP_STATUS" =~ ^2 ]]; then
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "Upload succeeded (HTTP $HTTP_STATUS) for file: $filepath"
                echo "$BODY"
              fi
            else
              echo "Upload failed (HTTP $HTTP_STATUS) for file: $filepath"
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "$BODY"
              fi
              exit 1
            fi
          done
              else
                echo "Upload succeeded (HTTP $HTTP_STATUS) for file: $filepath"
                echo "$BODY"
              fi
            else
              echo "Upload failed (HTTP $HTTP_STATUS) for file: $filepath"
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "$BODY"
              fi
              exit 1
            fi
          done
