name: Upload Media to Wiki.js

on:
  workflow_dispatch:

env:
  WIKI_URL: http://wiki.franquinho.info
  PARENT_FOLDER_ID: 1

jobs:
  upload-docs-media:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Media Files
        id: detect
        run: |
          MEDIA_FILES=$(find documentation/ -type f ! -name "*.md")
          echo "MEDIA_FILES<<EOF" >> $GITHUB_ENV
          echo "$MEDIA_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Ficheiros encontrados:"
          echo "$MEDIA_FILES"

      - name: Get Repository Name
        id: repo
        run: |
          repo_name="${GITHUB_REPOSITORY##*/}"   # extrai apenas o nome do repo
          echo "REPO_NAME=${repo_name,,}" >> $GITHUB_ENV
          echo "Repository name: ${repo_name,,}"

      - name: Create folder in Wiki.js (if needed)
        id: folder
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          # compute API endpoints from WIKI_URL
          GRAPHQL_URL="${WIKI_URL%/}/graphql"
          UPLOAD_URL="${WIKI_URL%/}/u"

          QUERY_TEMPLATE='query { assets { folders(parentFolderId: $PARENT_FOLDER_ID) { id name } } }'
          QUERY=$(echo "$QUERY_TEMPLATE" | sed "s/\$PARENT_FOLDER_ID/$PARENT_FOLDER_ID/g")
          JSON=$(jq -n --arg q "$QUERY" '{ query: $q }')

          RESULT=$(curl -s -X POST "$GRAPHQL_URL" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON")

          # validate JSON before piping to jq
          if ! echo "$RESULT" | jq . >/dev/null 2>&1; then
            echo "ERROR: Non-JSON response when querying folders:"
            echo "$RESULT"
            exit 1
          fi

          FOLDER_ID=$(echo "$RESULT" | jq -r --arg NAME "$REPO_NAME" '.data.assets.folders[] | select(.name == $NAME) | .id')

          if [ -z "$FOLDER_ID" ] || [ "$FOLDER_ID" = "null" ]; then
            echo "Folder not found, creating..."

            MUTATION_TEMPLATE='mutation { assets { createFolder(parentFolderId: $PARENT_FOLDER_ID, slug: "$REPO_NAME", name: "$REPO_NAME") { responseResult { message succeeded }, id } } }'
            MUTATION=$(echo "$MUTATION_TEMPLATE" | sed "s/\$PARENT_FOLDER_ID/$PARENT_FOLDER_ID/g" | sed "s/\$REPO_NAME/$REPO_NAME/g")
            JSON=$(jq -n --arg q "$MUTATION" '{ query: $q }')

            RESULT=$(curl -s -X POST "$GRAPHQL_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON")

            # validate JSON before piping to jq
            if ! echo "$RESULT" | jq . >/dev/null 2>&1; then
              echo "ERROR: Non-JSON response when creating folder:"
              echo "$RESULT"
              exit 1
            fi

            FOLDER_ID=$(echo "$RESULT" | jq -r '.data.assets.createFolder.id')
            echo "Folder created with ID $FOLDER_ID"
          else
            echo "Folder already exists with ID $FOLDER_ID"
          fi

          echo "FOLDER_ID=$FOLDER_ID" >> $GITHUB_ENV


      - name: Upload Media Files
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          # ensure UPLOAD_URL is available (same logic as above)
          UPLOAD_URL="${WIKI_URL%/}/u"

          if [ -z "$MEDIA_FILES" ]; then
            echo "No media files to upload."
            exit 0
          fi

          # iterate robustly over newline-separated media file list
          echo "$MEDIA_FILES" | while IFS= read -r filepath || [ -n "$filepath" ]; do
            [ -z "$filepath" ] && continue
            echo "Uploading $filepath"

            # capture body + http status code
            RESPONSE_WITH_STATUS=$(curl -s -w "\n%{http_code}" -X POST "$UPLOAD_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -F "mediaUpload={\"folderId\":$FOLDER_ID}" \
              -F "mediaUpload=@$filepath")
            HTTP_STATUS=$(echo "$RESPONSE_WITH_STATUS" | tail -n1)
            BODY=$(echo "$RESPONSE_WITH_STATUS" | sed '$d')

            if [[ "$HTTP_STATUS" =~ ^2 ]]; then
              # success: try to pretty-print JSON, otherwise show raw body
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "Upload succeeded (HTTP $HTTP_STATUS) for file: $filepath"
                echo "$BODY"
              fi
            else
              echo "Upload failed (HTTP $HTTP_STATUS) for file: $filepath"
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "$BODY"
              fi
              exit 1
            fi
          done
