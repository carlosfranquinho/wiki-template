name: Upload Media to Wiki.js

on:
  workflow_dispatch:

env:
  WIKI_URL: http://wiki.franquinho.info
  # Optional: set to an existing Wiki.js folder id to nest uploads; leave blank for root
  PARENT_FOLDER_ID: ""

jobs:
  upload-docs-media:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Media Files
        id: detect
        run: |
          # build newline-separated list containing README.md, CHANGELOG.md (if exist) and all files under documentation/
          MEDIA_FILES=""
          [ -f README.md ] && MEDIA_FILES="$(printf "%s\n" "README.md")"
          [ -f CHANGELOG.md ] && MEDIA_FILES="$(printf "%s\n%s" "$MEDIA_FILES" "CHANGELOG.md")"
          if [ -d documentation ]; then
            while IFS= read -r -d '' f; do
              MEDIA_FILES="$(printf "%s\n%s" "$MEDIA_FILES" "$f")"
            done < <(find documentation/ -type f -print0)
          fi
          # remove empty lines and duplicates
          MEDIA_FILES="$(echo "$MEDIA_FILES" | sed '/^$/d' | awk '!seen[$0]++')"
          echo "MEDIA_FILES<<EOF" >> $GITHUB_ENV
          echo "$MEDIA_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Ficheiros encontrados:"
          echo "$MEDIA_FILES"

      - name: Get Repository Name
        id: repo
        run: |
          repo_name="${GITHUB_REPOSITORY##*/}"   # extrai apenas o nome do repo
          echo "REPO_NAME=${repo_name,,}" >> $GITHUB_ENV
          echo "Repository name: ${repo_name,,}"

      - name: Create folder in Wiki.js (if needed)
        id: folder
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          GRAPHQL_URL="${WIKI_URL%/}/graphql"
          normalize_parent_id() {
            local raw="$1"
            if [ -z "$raw" ] || [ "$raw" = "null" ] || [ "$raw" = "None" ]; then
              echo "null"
              return
            fi

            if [[ "$raw" =~ ^[0-9]+$ ]]; then
              echo "$raw"
              return
            fi

            echo "null"
          }

          parent_clause_for() {
            local parent="$1"
            if [ "$parent" = "null" ]; then
              echo "parentFolderId: null"
            else
              echo "parentFolderId: $parent"
            fi
          }

          build_folders_query() {
            local parent="$1"
            local clause
            clause=$(parent_clause_for "$parent")
            printf 'query { assets { folders(%s) { id name } } }' "$clause"
          }

          build_create_mutation() {
            local parent="$1"
            local slug_raw="$2"
            local name_raw="$3"
            local clause
            clause=$(parent_clause_for "$parent")

            jq -nr --arg clause "$clause" --arg slug "$slug_raw" --arg name "$name_raw" '
              "mutation { assets { createFolder(" + $clause + ", slug: " + ($slug|@json) + ", name: " + ($name|@json) + ") { responseResult { message succeeded } folder { id name parentId } } } }"
            '
          }

          effective_parent="$(normalize_parent_id "$PARENT_FOLDER_ID")"
          attempted_root="false"

          if [ "$effective_parent" = "null" ]; then
            attempted_root="true"
            if [ -n "$PARENT_FOLDER_ID" ] && [ "$PARENT_FOLDER_ID" != "null" ] && [ "$PARENT_FOLDER_ID" != "None" ]; then
              echo "WARNING: Provided PARENT_FOLDER_ID ('$PARENT_FOLDER_ID') is not numeric; defaulting to the wiki root."
            else
              echo "Parent folder id not provided; using the wiki root."
            fi
          else
            echo "Using parent folder id $effective_parent."
          fi

          attempt_parent="$effective_parent"

          while true; do
            QUERY=$(build_folders_query "$attempt_parent")
            JSON=$(jq -n --arg q "$QUERY" '{ query: $q }')

            RESULT=$(curl -s -X POST "$GRAPHQL_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON")

            if ! echo "$RESULT" | jq . >/dev/null 2>&1; then
              echo "ERROR: Non-JSON response when querying folders:"
              echo "$RESULT"
              exit 1
            fi

            FOLDER_ID=$(echo "$RESULT" | jq -r --arg NAME "$REPO_NAME" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)

            if [ -n "$FOLDER_ID" ] && [ "$FOLDER_ID" != "null" ]; then
              echo "Folder already exists with ID $FOLDER_ID"
              break
            fi

            echo "Folder not found, creating under parent $attempt_parent..."

            MUTATION=$(build_create_mutation "$attempt_parent" "$REPO_NAME" "$REPO_NAME")
            JSON_MUT=$(jq -n --arg q "$MUTATION" '{ query: $q }')

            RESULT_MUT=$(curl -s -X POST "$GRAPHQL_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON_MUT")

            if ! echo "$RESULT_MUT" | jq . >/dev/null 2>&1; then
              echo "ERROR: Non-JSON response when creating folder:"
              echo "$RESULT_MUT"
              exit 1
            fi

            HAS_ERRORS=$(echo "$RESULT_MUT" | jq -e '.errors? != null' >/dev/null 2>&1; echo $?)
            SUCCEEDED=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.succeeded // empty' 2>/dev/null || true)
            MESSAGE=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.message // empty' 2>/dev/null || true)

            if [ "$HAS_ERRORS" -eq 0 ] || [ "$SUCCEEDED" != "true" ]; then
              echo "Creation reported failure: $MESSAGE"
              if [ "$attempt_parent" != "null" ] && [ "$attempted_root" = "false" ]; then
                echo "Retrying creation under root (parentFolderId=null)."
                attempt_parent="null"
                attempted_root="true"
                continue
              fi
              echo "Full response:"
              echo "$RESULT_MUT"
              exit 1
            fi

            FOLDER_ID=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.folder.id // empty' 2>/dev/null || true)

            if [ -n "$FOLDER_ID" ] && [ "$FOLDER_ID" != "null" ]; then
              echo "Folder created with ID $FOLDER_ID"
              break
            fi

            RESULT_AFTER=$(curl -s -X POST "$GRAPHQL_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$JSON")

            if echo "$RESULT_AFTER" | jq . >/dev/null 2>&1; then
              FOLDER_ID=$(echo "$RESULT_AFTER" | jq -r --arg NAME "$REPO_NAME" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)
            else
              echo "WARNING: Non-JSON response when re-listing folders:"
              echo "$RESULT_AFTER"
            fi

            if [ -n "$FOLDER_ID" ] && [ "$FOLDER_ID" != "null" ]; then
              echo "Folder created with ID $FOLDER_ID"
              break
            fi

            if [ "$attempt_parent" != "null" ] && [ "$attempted_root" = "false" ]; then
              echo "Folder still not visible under parent $attempt_parent; retrying under root."
              attempt_parent="null"
              attempted_root="true"
              continue
            fi

            echo "ERROR: Could not obtain a valid folder ID after creation. Creation response:"
            echo "$RESULT_MUT"
            exit 1
          done

          echo "FOLDER_ID=$FOLDER_ID" >> $GITHUB_ENV


      - name: Upload Media Files
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          GRAPHQL_URL="${WIKI_URL%/}/graphql"
          UPLOAD_URL="${WIKI_URL%/}/u"

          if [ -z "$MEDIA_FILES" ]; then
            echo "No media files to upload."
            exit 0
          fi

          parent_clause_for() {
            local parent="$1"
            if [ -z "$parent" ] || [ "$parent" = "null" ]; then
              echo "parentFolderId: null"
            else
              echo "parentFolderId: $parent"
            fi
          }

          build_folders_query() {
            local parent="$1"
            local clause
            clause=$(parent_clause_for "$parent")
            printf 'query { assets { folders(%s) { id name } } }' "$clause"
          }

          build_create_mutation() {
            local parent="$1"
            local slug_raw="$2"
            local name_raw="$3"
            local clause
            clause=$(parent_clause_for "$parent")

            jq -nr --arg clause "$clause" --arg slug "$slug_raw" --arg name "$name_raw" '
              "mutation { assets { createFolder(" + $clause + ", slug: " + ($slug|@json) + ", name: " + ($name|@json) + ") { responseResult { message succeeded } folder { id name parentId } } } }"
            '
          }

          ensure_folder_path() {
            local parent_id="$1"
            local path="$2"

            if [ -z "$parent_id" ] || [ "$parent_id" = "null" ]; then
              parent_id="null"
            fi

            local IFS='/'
            local parts=()
            read -r -a parts <<< "$path"
            for seg in "${parts[@]}"; do
              [ -z "$seg" ] && continue

              QUERY=$(build_folders_query "$parent_id")
              JSON=$(jq -n --arg q "$QUERY" '{ query: $q }')

              RESULT=$(curl -s -X POST "$GRAPHQL_URL" \
                -H "Authorization: Bearer $WIKI_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data "$JSON")

              if ! echo "$RESULT" | jq . >/dev/null 2>&1; then
                echo "ERROR: Non-JSON response when listing folders (parent $parent_id):"
                echo "$RESULT"
                exit 1
              fi

              CHILD_ID=$(echo "$RESULT" | jq -r --arg NAME "$seg" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)

              if [ -n "$CHILD_ID" ] && [ "$CHILD_ID" != "null" ]; then
                echo "Found folder '$seg' (id: $CHILD_ID) under parent $parent_id"
                parent_id="$CHILD_ID"
                continue
              fi

              echo "Creating folder '$seg' under parent $parent_id"

              MUTATION=$(build_create_mutation "$parent_id" "$seg" "$seg")
              JSON_MUT=$(jq -n --arg q "$MUTATION" '{ query: $q }')

              RESULT_MUT=$(curl -s -X POST "$GRAPHQL_URL" \
                -H "Authorization: Bearer $WIKI_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data "$JSON_MUT")

              if ! echo "$RESULT_MUT" | jq . >/dev/null 2>&1; then
                echo "ERROR: Non-JSON response when creating folder '$seg' under parent $parent_id:"
                echo "$RESULT_MUT"
                exit 1
              fi

              HAS_ERRORS=$(echo "$RESULT_MUT" | jq -e '.errors? != null' >/dev/null 2>&1; echo $?)
              SUCCEEDED=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.succeeded // empty' 2>/dev/null || true)
              MESSAGE=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.responseResult.message // empty' 2>/dev/null || true)

              if [ "$HAS_ERRORS" -eq 0 ] || [ "$SUCCEEDED" != "true" ]; then
                echo "Creation of '$seg' under parent $parent_id failed: $MESSAGE"
                echo "Full response:"
                echo "$RESULT_MUT"
                exit 1
              fi

              CHILD_ID=$(echo "$RESULT_MUT" | jq -r '.data.assets.createFolder.folder.id // empty' 2>/dev/null || true)

              if [ -z "$CHILD_ID" ] || [ "$CHILD_ID" = "null" ]; then
                RESULT2=$(curl -s -X POST "$GRAPHQL_URL" \
                  -H "Authorization: Bearer $WIKI_API_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "$JSON")

                if echo "$RESULT2" | jq . >/dev/null 2>&1; then
                  CHILD_ID=$(echo "$RESULT2" | jq -r --arg NAME "$seg" '.data.assets.folders[]? | select(.name == $NAME) | .id' || true)
                else
                  echo "WARNING: Non-JSON response when re-listing children of $parent_id:"
                  echo "$RESULT2"
                fi
              fi

              if [ -z "$CHILD_ID" ] || [ "$CHILD_ID" = "null" ]; then
                echo "ERROR: Could not create/find folder '$seg' under parent $parent_id."
                echo "$RESULT_MUT"
                exit 1
              fi

              echo "Created folder '$seg' (id: $CHILD_ID) under parent $parent_id"
              parent_id="$CHILD_ID"
            done

            echo "$parent_id"
          }

          echo "$MEDIA_FILES" | while IFS= read -r filepath || [ -n "$filepath" ]; do
            [ -z "$filepath" ] && continue
            echo "Processing $filepath"

            relpath="${filepath#./}"
            dirpath="$(dirname "$relpath")"

            target_parent="$FOLDER_ID"

            if [ "$dirpath" != "." ] && [ "$dirpath" != "$relpath" ]; then
              target_parent="$(ensure_folder_path "$FOLDER_ID" "$dirpath")"
            fi

            echo "Uploading $filepath to folder id $target_parent"

            RESPONSE_WITH_STATUS=$(curl -s -w "\n%{http_code}" -X POST "$UPLOAD_URL" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -F "mediaUpload={\"folderId\":$target_parent}" \
              -F "mediaUpload=@$filepath")
            HTTP_STATUS=$(echo "$RESPONSE_WITH_STATUS" | tail -n1)
            BODY=$(echo "$RESPONSE_WITH_STATUS" | sed '$d')

            if [[ "$HTTP_STATUS" =~ ^2 ]]; then
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "Upload succeeded (HTTP $HTTP_STATUS) for file: $filepath"
                echo "$BODY"
              fi
            else
              echo "Upload failed (HTTP $HTTP_STATUS) for file: $filepath"
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "$BODY" | jq .
              else
                echo "$BODY"
              fi
              exit 1
            fi
          done
